<?php

namespace App\Models;

use App\Traits\HasCreatorAndUpdater;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use Kalnoy\Nestedset\NodeTrait;

class File extends Model
{
    // This includes the HasCreatorAndUpdater trait - contains the boot method
    use HasCreatorAndUpdater, HasFactory, NodeTrait, SoftDeletes;

    public static function getDefaultRoot($userId)
    {
        return self::whereIsRoot()->where('created_by', $userId)->firstOrFail();
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function ($model) {
            if (! $model->parent) {
                return;
            }

            /*
             * See ,by default we create a file with the user's name when they registered
             * So, It will be the root directory for the user always
             * And because of that, here we are checking if the current folder's parent is root or not, instead of checking if the current folder is root or not
             * if the parent is root, the for the user he create's the folder directly in the root directory
            */

            $model->path = (($model->parent?->isRoot()) ? '' : $model->parent->path.'/')
                .Str::slug($model->name);
        });

        static::deleting(function ($model) {

            //            But currently we don't need this code, because we are using soft deleting the files.

            //            if (! $model->is_folder) {
            //                Storage::delete($model->storage_path);
            //            } else {
            //                $model->descendants->each(function ($descendant) {
            //                    $descendant->delete();
            //                });
            //            }
        });
    }

    public function isRoot()
    {
        return $this->parent_id == null;
    }

    public function isOwnedBy($userId)
    {
        return $this->created_by == $userId;
    }

    public function user()
    {
        return $this->belongsTo(User::class, 'created_by');
    }

    public function parent()
    {
        return $this->belongsTo(File::class, 'parent_id');
    }

    public function owner(): Attribute
    {
        return Attribute::make(function ($value, array $attributes) {
            return $attributes['created_by'] == auth()->id() ? 'me' : $this->user->name;
        });
    }

    public function getFileSize()
    {
        $units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'];

        // size is in bytes.
        // 1 KB = 1024 bytes
        // 1 MB = 1024 KB => (1024 * 1024) bytes
        // this is why we return the power using log
        $power = $this->size > 0 ? floor(log($this->size, 1024)) : 0;

        return number_format($this->size / (1024 ** $power), 2, '.', ',').' '.$units[$power]; // this power is also act as a index for the units array
    }

    public function moveToTrash()
    {
        $this->deleted_at = now();
        $this->save();
    }

    public function permanentDelete()
    {
        $this->descendants->each(function ($descendant) {
            if (! $descendant->is_folder) {
                Storage::delete($descendant->storage_path);
            }
            $descendant->forceDelete();
        });

        if (! $this->is_folder) {
            Storage::delete($this->storage_path);
        }
        $this->forceDelete();
    }
}
